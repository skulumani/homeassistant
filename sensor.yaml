# Sensors
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /media/data
    - type: memory_use_percent
    - type: processor_use
    - type: network_in
      arg: wlan0
    - type: network_out
      arg: wlan0
- platform: template
  sensors:
    solar_angle:
      friendly_name: "Sun Angle"
      unit_of_measurement: 'Â°'
      value_template: "{{ '%+.1f'|format(state_attr('sun.sun', 'elevation')) }}"
- platform: template
  sensors:
    ecobee_outside_temperature:
      friendly_name: "Ecobee Outside"
      unit_of_measurement: 'Â°C'
      value_template: "{{ '%.1f'|format(state_attr('weather.downstairs', 'temperature')) }}"
    ecobee_outside_humidity:
      friendly_name: "Ecobee Humidity"
      unit_of_measurement: '%'
      value_template: "{{ '%2g'|format(state_attr('weather.downstairs', 'humidity')) }}"
    ecobee_outside_pressure:
      friendly_name: "Ecobee Pressure"
      unit_of_measurement: "mb"
      value_template: "{{ '%4g'|format(state_attr('weather.downstairs', 'pressure')) }}"
- platform: template
  sensors:
    ambient_light:
      friendly_name: 'Ambient Light'
      unit_of_measurement: 'N'
      value_template: "{{ '%.2f'|format(  state_attr('sun.sun', 'elevation') * (1 - states('sensor.dark_sky_cloud_coverage') | float/100)  ) }}"
- platform: template
  sensors:
    period_of_day:
      friendly_name: "Period of the day"
      value_template: >-
        {% if state_attr('sun.sun', 'elevation') < -18 %}
          night
        {% elif state_attr('sun.sun', 'elevation') < -12 %}
          astronomical_twilight
        {% elif state_attr('sun.sun', 'elevation') < -6 %}
          nautical_twilight
        {% elif state_attr('sun.sun', 'elevation') < 3 %}
          civil_twilight
        {% else %}
          day
        {% endif %}
      icon_template: >-
        {% if (as_timestamp(state_attr('sun.sun', 'next_dusk')) - (as_timestamp(state_attr('sun.sun', 'next_setting')))) < 0 %}
          mdi:weather-sunset-down
        {% elif (as_timestamp(state_attr('sun.sun', 'next_rising')) - (as_timestamp(state_attr('sun.sun', 'next_dawn')))) < 0 %}
          mdi:weather-sunset-up
        {% elif state_attr('sun.sun', 'elevation') < 0 %}
          mdi:weather-night
        {% else %}
          mdi:weather-sunny
        {% endif %}
# - platform: google_travel_time
#   name: Home to Collins
#   api_key: !secret google_distance_api
#   origin: zone.Home
#   destination: zone.Collins
- platform: waze_travel_time
  origin: zone.Home
  destination: zone.Collins
  region: 'US'
  name: "waze_home_to_collins"
- platform: command_line
  name: SSL Cert expiry
  unit_of_measurement: days
  scan_interval: 10800
  command: "ssl-cert-check -b -c /etc/letsencrypt/live/wolverines.duckdns.org/cert.pem | awk '{ print $NF }'"
- platform: worldclock
  time_zone: UTC
  name: UTC
# - platform: template
#   sensors:
#     f1_event_message:
#       friendly_name: "Next F1 Session"
#       value_template: "{{ states.calendar.f1_all.attributes.message }}"
- platform: uptime
  name: HA Uptime
  unit_of_measurement: hours
- platform: version
  name: HA Version


# front camera sensors

