# Lights
- id: porch_light_controller
  alias: Porch Light Controller
  mode: queued
  max: 5
  trigger:
    - platform: template
      value_template: "{{ not is_state('sensor.period_of_day', 'day') }}"
    - platform: template
      value_template: "{{ is_state('sensor.period_of_day', 'day') }}"
    # - platform: numeric_state
    #   entity_id: sensor.porch_light_desired_brightness
    #   below: '101'
    # - platform: state
    #   entity_id: sensor.porch_light_brightness
  condition: []
  action:
    - service: >
        {% if is_state('sensor.period_of_day', 'day') %}
          light.turn_off
        {% else %}
          light.turn_on
        {% endif %}
      entity_id: light.porch

- id: hallway_light_controller
  alias: Hallway Light Controller
  mode: queued
  max: 5
  trigger:
    - platform: template
      value_template: "{{ not is_state('sensor.period_of_day', 'day') }}"
    - platform: template
      value_template: "{{ is_state('sensor.period_of_day', 'day') }}"
    # - platform: numeric_state
    #   entity_id: sensor.hallway_light_desired_brightness
    #   below: '101'
    # - platform: state
    #   entity_id: sensor.hallway_light_desired_brightness
  condition:
    - condition: and
      conditions:
        - "{{ is_state('group.family_presence', 'on') }}"
  action:
    - service: >
        {% if is_state('sensor.period_of_day', 'day') %}
          light.turn_off
        {% else %}
          light.turn_on
        {% endif %}
      entity_id: light.hallway

- id: living_room_light_controller
  alias: Living room light controller
  mode: queued
  max: 5
  trigger:
    - platform: template
      value_template: "{{ not is_state('sensor.period_of_day', 'day') }}"
    - platform: template
      value_template: "{{ is_state('sensor.period_of_day', 'day') }}"
    # - platform: template
    #   value_template: "{{ is_state('binary_sensor.evening_tod', 'on') }}"
    # - platform: template
    #   value_template: "{{ is_state('binary_sensor.evening_tod', 'off') }}"
    # - platform: numeric_state
    #   entity_id: sensor.living_room_light_desired_brightness
    #   below: '101'
  condition: 
    - condition: and
      conditions:
        - "{{ is_state('group.family_presence', 'on') }}"
  action:
    - service: >
        {% if is_state('sensor.period_of_day', 'day') %}
          light.turn_off
        {% else %}
          light.turn_on
        {% endif %}
      entity_id: light.living_room_lights

# Phone charging
- id: stop_pixel_charging
  alias: Stop Pixel 2 Charging
  trigger:
  - platform: numeric_state
    entity_id: sensor.pixel_2_battery_level
    above: 80
  action:
  # - service: tts.google_translate_say
  #   entity_id: media_player.bedroom_speaker
  #   data:
  #     message: Pixel 2 has finished charging to {{states('sensor.pixel_2_battery_level')}}
  #       percent
  - service: switch.turn_off
    entity_id: switch.plug

- id: start_pixel_charging
  alias: Start Pixel 2 Charging
  trigger:
  - platform: numeric_state
    entity_id: sensor.pixel_2_battery_level
    below: 50
  action:
  # - service: tts.google_translate_say
  #   entity_id: media_player.bedroom_speaker
  #   data:
  #     message: Pixel 2 can now be charged from {{states('sensor.pixel_2_battery_level')}}
  #       percent
  - service: switch.turn_on
    entity_id: switch.plug

# Motion cameras
# - id: front_camera_motion_signal
#   initial_state: false
#   alias: Send front video to signal group
#   trigger:
#   - platform: state
#     entity_id: binary_sensor.motion_front
#     to: 'on'
#   condition: []
#   action:
#   - service: script.turn_on
#     entity_id: script.front_camera_signal_motion
#   mode: single

# - id: back_camera_motion_signal
#   initial_state: false
#   alias: Send back video to signal group
#   trigger:
#   - platform: state
#     entity_id: binary_sensor.motion_back
#     to: 'on'
#   condition: []
#   action:
#   - service: script.turn_on
#     entity_id: script.back_camera_signal_motion
#   mode: single

- id: hvac_away_mode
  alias: HVAC Away Mode when not home
  mode: single
  trigger:
  - platform: state
    entity_id: group.family_presence
    to: 'off'
    for: "00:05:00"
  action:
  - service: notify.signal_group
    data:
      message: '{{ now().strftime("%Y-%m-%dT%H:%M:%S%z") }} - No one home. HVAC away mode.'
  - service: climate.set_preset_mode
    target:
      entity_id: all
    data:
      preset_mode: away

- id: hvac_resume_mode
  alias: HVAC Resume program when home
  mode: single
  trigger:
  - platform: state
    entity_id: group.family_presence
    to: 'on'
  action:
  - service: notify.signal_group
    data:
      message: '{{ now().strftime("%Y-%m-%dT%H:%M:%S%z") }} - Return home. HVAC home mode'
  - service: climate.set_preset_mode
    target:
      entity_id: all
    data:
      preset_mode: home

  # Home sensors/switches
- id: doorbell_single_click
  alias: doorbell_single_click
  initial_state: true
  trigger:
    platform: event
    event_type: "deconz_event"
    event_data:
      id: "mini_switch"
      event: 1002
  action: 
    - service: script.sound_doorbell

# WATER LEAK ALARM
- alias: "Water leak detected"
  trigger:
    - platform: state
      entity_id: group.water_sensors
      to: "on"
  action:
    - service: notify.signal_group
      data:
        message: >-
          {% for entity in trigger.to_state.attributes.entity_id %}
          {% if states(entity) == 'on' %}
            " {{now().strftime('%Y-%m-%dT%H:%M:%S%z')}} Water leak detected!! - {{ state_attr(entity, 'friendly_name') }}"
          {% endif %}
          {% endfor %}
    - service: tts.google_translate_say
      entity_id: group.google_home
      data:
        message: >-
          {% for entity in trigger.to_state.attributes.entity_id %}
          {% if states(entity) == 'on' %}
            "Water leak in {{ state_attr(entity, 'friendly_name') }}"
          {% endif %}
          {% endfor %}

# ALARM

- alias: "Alarm - Trigger when sensors go off"
  trigger: 
    - platform: state
      entity_id: group.alarm_sensors
      to: "on"
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: alarm_control_panel.alarm
        state: armed_home
      - condition: state
        entity_id: alarm_control_panel.alarm
        state: armed_away
  action:
    - service: alarm_control_panel.alarm_trigger
      entity_id: alarm_control_panel.alarm

# TODO - Add automation to send video when alarm is pending

- alias: "Alarm - Pending Reminder"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      from: "armed_away" # no delay for armed_home
      to: "pending"
  action:
    - service: tts.google_translate_say
      entity_id: group.google_home
      data:
        message: "Alarm initiated"
    - service: timer.start
      entity_id: timer.alarm_pending

- alias: "Alarm - Pending Repeat"
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.alarm_pending
  condition:
    condition: state
    entity_id: alarm_control_panel.alarm
    state: "pending"
  action:
    - service: tts.google_translate_say
      entity_id: group.google_home
      data:
        message: "Disarm the alarm now!"
    - service: timer.start
      entity_id: timer.alarm_pending


- alias: "Alarm - Triggered"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: "triggered"
  action: 
    - service: notify.signal_group
      data:
        message: '{{now().strftime("%Y-%m-%dT%H:%M:%S%z")}} Alarm Triggered!!'
    - service: script.sound_alarm


- alias: "Alarm - Disarmed"
  trigger: 
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: "disarmed"
  action:
    # turn off the alarm
    - service: tts.google_translate_say
      entity_id: group.google_home
      data:
        message: "Disarmed"
    - service: timer.cancel
      entity_id: timer.alarm_pending

- alias: "Disarm alarm when presence is detected"
  trigger: # either person is home
    - platform: state
      entity_id: group.family_presence
      to: "on"
  condition:
    - condition: state
      entity_id: alarm_control_panel.alarm
      state: "armed_away"
  action:
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.alarm
    - delay: "00:00:05"
    - service: notify.signal_group
      data:
        message: '{{now().strftime("%Y-%m-%dT%H:%M:%S%z")}} Alarm disarmed due to presence.'
    - service: tts.google_translate_say
      entity_id: group.google_home
      data:
        message: "Disarmed due to presence"

- alias: "Arm the alarm when no one is home"
  trigger:
    - platform: state
      entity_id: group.family_presence
      to: "off"
      for: "00:05:00"
  condition:
    - condition: state
      entity_id: alarm_control_panel.alarm
      state: "disarmed"
  action:
    - service: alarm_control_panel.alarm_arm_away
      entity_id: alarm_control_panel.alarm
    - service: notify.signal_group
      data:
        message: '{{now().strftime("%Y-%m-%dT%H:%M:%S%z")}} Alarm armed in away mode due to lack of presence.'

- alias: "Arm alarm at night and home"
  trigger:
  - at: '23:00'
    platform: time
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: group.family_presence
        state: "on"
      - condition: state
        entity_id: alarm_control_panel.alarm
        state: "disarmed"
  action:
    - service: alarm_control_panel.alarm_arm_home
      entity_id: alarm_control_panel.alarm
    - service: notify.signal_group
      data:
        message: '{{now().strftime("%Y-%m-%dT%H:%M:%S%z")}} Alarm armed in home mode at night and home.'

- alias: "Disarm alarm when home in morning"
  trigger:
    - platform: time
      at: '06:00'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: group.family_presence
        state: "on"
      - condition: state
        entity_id: alarm_control_panel.alarm
        state: "armed_home"
  action:
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.alarm
    - service: notify.signal_group
      data:
        message: '{{now().strftime("%Y-%m-%dT%H:%M:%S%z")}} Alarm disarmed in morning.'

# Frigate automation
- id: frigate_signal 
  alias: Frigate Signal notification
  trigger:
    - platform: mqtt
      topic: "frigate/events"
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: "binary_sensor.shankar_presence"
      state: 'off'
    - condition: state
      entity_id: "binary_sensor.christine_presence"
      state: 'off'
  action:
    - delay: "00:00:45"
    - service: notify.signal_group
      data_template:
        message: "{{ now().strftime('%Y-%m-%dT%H:%M:%S') }} - {{trigger.payload_json['after']['label']}} detected by {{trigger.payload_json['after']['camera']}} camera."
        data:
          attachments:
            - "/media/frigate/clips/{{trigger.payload_json['after']['camera']}}-{{trigger.payload_json['after']['id']}}.jpg"
            # - "/media/frigate/clips/{{trigger.payload_json['after']['camera']}}-{{trigger.payload_json['after']['id']}}.mp4"
    # - service: notify.mobile_app_pixel_2
    #   data_template:
    #     message: "A {{trigger.payload_json['after']['label']}} was detected."
    #     data:
    #       image: "https://100.99.169.123:8123/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/thumbnail.jpg?format=android"
    #       tag: "{{trigger.payload_json['after']['id']}}"
    #

# Frigate mobile appautomation
- id: frigate_mobile 
  alias: Frigate Mobile App notification
  trigger:
    - platform: mqtt
      topic: "frigate/events"
  action:
     - service: notify.mobile_app_pixel_2
       data_template:
         message: "A {{trigger.payload_json['after']['label']}} was detected by {{trigger.payload_json['after']['camera']}} camera."
         data:
           image: "http://100.99.169.123:8123/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/thumbnail.jpg?format=android"
           tag: "{{trigger.payload_json['after']['id']}}"
           when: '{{trigger.payload_json["after"]["start_time"]|int}}'
           video: "http://100.99.169.123:8123/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/{{trigger.payload_json['after']['camera']}}/clip.mp4"
           group: 'Camera Detection'
    
- id: solar_eod_message
  alias: Solar Stats Signal Message
  mode: single
  trigger:
    - platform: template
      value_template: '{{ states.sensor.period_of_day.state == ''civil_twilight'' }}'
  condition:
    - condition: time
      after: '16:00:00'
  action:
    - service: notify.signal_group
      data: 
        message: '{{ now().strftime("%Y-%m-%d")}} Solar Stats {{ "\n" -}} Energy today: {{ states("sensor.solar_today_kwh") }} KWh  {{ "\n" -}} Energy Lifetime: {{ states("sensor.solar_lifetime_mwh") }} MWh'

- id: signal_buildapcsales_bot
  alias: Signal BuildAPCSales Bot 
  mode: single
  trigger:
    - platform: time
      at: "06:00:00"
  action: 
    - service: notify.signal_reddit_bot_group
      data:
        message: >-
          BuildAPCSales


          {% for post in state_attr('sensor.reddit_buildapcsales', 'posts') %}
          {{post.title|truncate(80)}}
           http://reddit.com/{{post.id}}

          {% endfor %}

- id: signal_freegamefindings_bot
  alias: Signal FreeGameFindings Bot 
  mode: single
  trigger:
    - platform: time
      at: "06:00:00"
  action: 
    - service: notify.signal_reddit_bot_group
      data:
        message: >-
          FreeGameFindings


          {% for post in state_attr('sensor.reddit_freegamefindings', 'posts') %}
          {{post.title|truncate(80)}} 
           http://reddit.com/{{post.id}}

          {% endfor %}

# - id: purge_db
#   alias: Purge database
#   mode: single
#   trigger:
#     - platform: time
#       at: "04:12:00"
#   action:
#     - service: recorder.purge
#       data:
#         keep_days: 7
#         repack: true

- id: healthchecks
  alias: Healthchecks ping
  mode: single
  trigger:
    - platform: time_pattern
      minutes: "/5"
  action:
    - service: shell_command.healthcheck_ping
