#############################################################################
# TEMPLATE BINARY SENSOR
# ###########################################################################

- binary_sensor:
  - name: Sufficient Outdoor Illumination
    unique_id: sufficient_outdoor_illumination
    state: >-
      {% set sun_shining = states('sensor.solar_now_watts') | float > 75 %}

      {{ sun_shining }}

- binary_sensor:
  - name: Night time
    unique_id: night_time
    state: >-
      {% set night = is_state('sensor.period_of_day', 'night') %}

      {{ night }}

- binary_sensor:
  - name: Twilight time
    unique_id: twilight_time
    state: >-
      {% set astronomical_twilight = is_state('sensor.period_of_day', 'astronomical_twilight') %}
      {% set nautical_twilight = is_state('sensor.period_of_day', 'nautical_twilight') %}
      {% set civil_twilight = is_state('sensor.period_of_day', 'civil_twilight') %}
  
      {{ astronomical_twilight or nautical_twilight or civil_twilight }}

- binary_sensor:
  - name: Day time
    unique_id: day_time
    state: >-
      {% set day = is_state('sensor.period_of_day', 'day') %}

      {{ day }}

- binary_sensor:
  - name: Porch - Light Should be Off
    unique_id: porch_light_should_be_off
    state: >-
      {% set sun_shining = is_state('binary_sensor.sufficient_outdoor_illumination', 'on') %}
      {% set day = is_state('binary_sensor.day_time', 'on') %}

      {{ sun_shining and day }}

- binary_sensor:
  - name: Porch - Light should be on low
    unique_id: porch_light_should_be_on_low
    state: >-
      {% set no_event = is_state('binary_sensor.porch_light_should_be_on_high', 'off') %}
      {% set not_off = is_state('binary_sensor.porch_light_should_be_off', 'off') %}

      {{ no_event and not_off}}
      
- binary_sensor:
  - name: Porch - Light should be on high
    unique_id: porch_light_should_be_on_high
    state: >-
      {% set not_off = is_state('binary_sensor.porch_light_should_be_off', 'off') %}
      {% set motion = is_state('binary_sensor.porch_person_motion', 'on') %}
      {% set front_door = is_state('binary_sensor.front_door', 'on') %}

      {{ not_off and (motion or front_door) }}

- binary_sensor:
  - name: Hallway - Light should be off
    unique_id: hallway_light_should_be_off
    state: >-
      {% set sun_shining = is_state('binary_sensor.sufficient_outdoor_illumination', 'on') %}
      {% set day = is_state('binary_sensor.day_time', 'on') %}
      {% set no_presence = is_state('group.family_presence', 'off') %}

      {{ (sun_shining and day) or no_presence }}

- binary_sensor:
  - name: Hallway - Light should be on low
    unique_id: hallway_light_should_be_on_low
    state: >-
      {% set twilight = is_state('binary_sensor.twilight_time', 'on') %}
      {% set not_off = is_state('binary_sensor.hallway_light_should_be_off', 'off') %}
      {% set presence = is_state('group.family_presence', 'on') %}
      {% set night = is_state('binary_sensor.night_time', 'on') %}

      {{ not_off and presence }}

- binary_sensor:
  - name: Living Room - Light should be off
    unique_id: living_room_should_be_off
    state: >-
      {% set sun_shining = is_state('binary_sensor.sufficient_outdoor_illumination', 'on') %}
      {% set no_presence = is_state('group.family_presence', 'off') %}
      {% set not_evening = is_state('binary_sensor.evening_tod', 'off') %}

      {{ (sun_shining and not_evening) or no_presence }}

- binary_sensor:
  - name: Living Room - Light should be low
    unique_id: living_room_should_be_on_low
    state: >-
      {% set not_off = is_state('binary_sensor.living_room_should_be_off', 'off') %}

      {{ not_off }}

- sensor:
  - name: Porch Light Desired Brightness
    unique_id: porch_light_desired_brightness
    unit_of_measurement: "%"
    state: >-
      {% if is_state('binary_sensor.porch_light_should_be_off', 'on') %}
      0.0
      {% elif is_state('binary_sensor.porch_light_should_be_low', 'on') %}
      30.0
      {% elif is_state('binary_sensor.porch_light_should_be_on_high', 'on') %}
      50.0
      {% else %}
      0.0
      {% endif %}

- sensor:
  - name: Hallway Light Desired Brightness
    unique_id: hallway_light_desired_brightness
    unit_of_measurement: "%"
    state: >-
      {% if is_state('binary_sensor.hallway_light_should_be_off', 'on') %}
      0.0
      {% elif is_state('binary_sensor.hallway_light_should_be_on_low', 'on') %}
      30.0
      {% else %}
      0.0
      {% endif %}

- sensor:
  - name: Living Room Light Desired Brightness
    unique_id: living_room_light_desired_brightness
    unit_of_measurement: "%"
    state: >-
      {% if is_state('binary_sensor.living_room_should_be_off', 'on') %}
      0.0
      {% elif is_state('binary_sensor.living_room_should_be_on_low', 'on') %}
      50.0
      {% endif %}

#############################
# ALARM
# #####################
# - binary_sensor:
#   - name: Alarm - Should be armed
#     unique_id: 
#
#
#

# SOLCAST FORECAST
- sensor: 

    - name: "Solcast Forecast Energy Today Remaining"
      unique_id: solcast_forecast_energy_today_remaining
      unit_of_measurement: "kWh"
      device_class: energy
      state: >
        {% set ns = namespace (fc_today = 0) %}
        {% for forecast in state_attr('sensor.solcast_forecast', 'forecasts')|default('variable is not defined') %}
          {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %}
          {% if daydiff.days == 0 %}
            {% set ns.fc_today = ns.fc_today + (forecast.pv_estimate/2)|float %}
          {%- endif %}
        {%- endfor %}
        {{ ns.fc_today|round(3) }}
    - name: "Solcast Forecast Energy Tomorrow"
      unique_id: solcast_forecast_energy_tomorrow
      unit_of_measurement: "kWh"
      device_class: energy
      state: >
        {% set ns = namespace (fc_tommorrow = 0) %}
        {% for forecast in state_attr('sensor.solcast_forecast', 'forecasts')|default('variable is not defined') %}
          {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %}
          {% if daydiff.days == 1 %}
            {% set ns.fc_tommorrow = ns.fc_tommorrow + (forecast.pv_estimate/2)|float %}
          {%- endif %}
        {%- endfor %}
        {{ ns.fc_tommorrow|round(3) }}
    - name: "Solcast Forecast Peak Power Today"
      unique_id: solcast_forecast_peak_power_today
      unit_of_measurement: "kW"
      device_class: power
      state_class: measurement
      state: >
        {% set ns = namespace (fc_today_max = 0) %}
        {% for forecast in state_attr('sensor.solcast_forecast', 'forecasts')|default('variable is not defined') %}
          {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %}
          {% if daydiff.days == 0 %}
            {% if ns.fc_today_max < forecast.pv_estimate|float %}
              {% set ns.fc_today_max = forecast.pv_estimate|float %}
            {%- endif %}
          {%- endif %}
        {%- endfor %}
        {{ ns.fc_today_max|round(3) }}
    - name: "Solcast Forecast Peak Power Tomorrow"
      unique_id: solcast_forecast_peak_power_tomorrow
      unit_of_measurement: "kW"
      device_class: power
      state_class: measurement
      state: >
        {% set ns = namespace (fc_tomorrow_max = 0) %}
        {% for forecast in state_attr('sensor.solcast_forecast', 'forecasts')|default('variable is not defined') %}
          {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %}
          {% if daydiff.days == 1 %}
            {% if ns.fc_tomorrow_max < forecast.pv_estimate|float %}
              {% set ns.fc_tomorrow_max = forecast.pv_estimate|float %}
            {%- endif %}
          {%- endif %}
        {%- endfor %}
        {{ ns.fc_tomorrow_max|round(3) }}
    - name: "Solcast Forecast Peak Time Today"
      unique_id: solcast_forecast_peak_time_today
      icon: mdi:clock
      state: >
        {% set ns = namespace (fc_today_max = 0, fc_today_max_time = 0) %}
        {% for forecast in state_attr('sensor.solcast_forecast', 'forecasts')|default('variable is not defined') %}
          {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %}
          {% if daydiff.days == 0 %}
            {% if ns.fc_today_max < forecast.pv_estimate|float %}
              {% set ns.fc_today_max = forecast.pv_estimate|float %}
              {% set ns.fc_today_max_time = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).time() %}
            {%- endif %}
          {%- endif %}
        {%- endfor %}
        {{ ns.fc_today_max_time }}
    - name: "Solcast Forecast Peak Time Tomorrow"
      unique_id: solcast_forecast_peak_time_tomorrow
      icon: mdi:clock
      state: >
        {% set ns = namespace (fc_tomorrow_max = 0, fc_tomorrow_max_time = 0) %}
        {% for forecast in state_attr('sensor.solcast_forecast', 'forecasts')|default('variable is not defined') %}
          {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %}
          {% if daydiff.days == 1 %}
            {% if ns.fc_tomorrow_max < forecast.pv_estimate|float %}
              {% set ns.fc_tomorrow_max = forecast.pv_estimate|float %}
              {% set ns.fc_tomorrow_max_time = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).time() %}
            {%- endif %}
          {%- endif %}
        {%- endfor %}
        {{ ns.fc_tomorrow_max_time }}
    - name: "Solcast Forecast Power Current Hour"
      unique_id: solcast_forecast_power_current_hour
      state: >
        {{ (state_attr('sensor.solcast_forecast', 'forecasts')[0].pv_estimate|default('variable is not defined') + state_attr('sensor.solcast_forecast', 'forecasts')[1].pv_estimate|default('variable is not defined'))|round(3) }}
      unit_of_measurement: 'kW'
      device_class: power
    - name: "Solcast Forecast Power Next 12 Hours"
      unique_id: solcast_forecast_power_next_12_hours
      state: >
        {% set ns = namespace (fc_next12 = 0) %}
        {% for i in range(0, 24) %}
          {% set ns.fc_next12 = ns.fc_next12 + states.sensor.solcast_forecast.attributes['forecasts'][i]['pv_estimate']|float %}
        {%- endfor %}
        {{ ns.fc_next12|round(3) }}
      unit_of_measurement: 'kW'
      device_class: power
    - name: "Solcast Forecast Power Next 24 Hours"
      unique_id: solcast_forecast_power_next_24_hours
      state: >
        {% set ns = namespace (fc_next24 = 0) %}
        {% for i in range(0, 48) %}
          {% set ns.fc_next24 = ns.fc_next24 + states.sensor.solcast_forecast.attributes['forecasts'][i]['pv_estimate']|float %}
        {%- endfor %}
        {{ ns.fc_next24|round(3) }}
      unit_of_measurement: 'kW'
      device_class: power
    - name: "Solcast Forecast Energy Current Hour"
      unique_id: solcast_forecast_energy_current_hour
      state: >
        {% set ns = namespace (fc_energy_current = 0) %}
        {% for i in range(0, 2) %}
          {% set ns.fc_energy_current = ns.fc_energy_current + (states.sensor.solcast_forecast.attributes['forecasts'][i]['pv_estimate']/2)|float %}
        {%- endfor %}
        {{ ns.fc_energy_current|round(3) }}
      unit_of_measurement: 'kWh'
      device_class: energy
    - name: "Solcast Forecast Energy Next Hour"
      unique_id: solcast_forecast_energy_next_hour
      state: >
        {% set ns = namespace (fc_energy_next = 0) %}
        {% for i in range(2, 4) %}
          {% set ns.fc_energy_next = ns.fc_energy_next + (states.sensor.solcast_forecast.attributes['forecasts'][i]['pv_estimate']/2)|float %}
        {%- endfor %}
        {{ ns.fc_energy_next|round(3) }}
      unit_of_measurement: 'kWh'
      device_class: energy
