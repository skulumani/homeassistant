# Sensors
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /config
    - type: disk_use_percent
      arg: /media/camera
    - type: memory_use_percent
    - type: memory_use
    - type: memory_free
    - type: swap_use
    - type: swap_free
    - type: swap_use_percent
    - type: processor_use
    - type: network_in
      arg: eth0
    - type: network_out
      arg: eth0
    - type: ipv4_address
      arg: eth0
    - type: throughput_network_in
      arg: eth0
    - type: throughput_network_out
      arg: eth0
    - type: processor_temperature
    - type: load_15m
    - type: load_5m
    - type: load_1m
    - type: last_boot
- platform: template
  sensors:
    solar_elevation:
      friendly_name: "Solar Elevation"
      unit_of_measurement: '°'
      value_template: "{{ '%+.1f'|format(state_attr('sun.sun', 'elevation')) }}"
    solar_azimuth:
      friendly_name: "Solar Azimuth"
      unit_of_measurement: '°'
      value_template: "{{ '%+.1f'|format(state_attr('sun.sun', 'azimuth')) }}"
    sunrise:
      friendly_name: "Sunrise"
      value_template: "{{ as_timestamp(strptime(state_attr('sun.sun', 'next_rising'), '')) | timestamp_local }}"
    sunset:
      friendly_name: "Sunset"
      value_template: "{{ as_timestamp(strptime(state_attr('sun.sun', 'next_setting'), '')) | timestamp_local }}"
    noon:
      friendly_name: "Noon"
      value_template: "{{ as_timestamp(strptime(state_attr('sun.sun', 'next_noon'), '')) | timestamp_local }}"

- platform: template
  sensors:
    ecobee_outside_temperature:
      friendly_name: "Ecobee Outside"
      unit_of_measurement: '°C'
      value_template: "{{ '%.2f'|format(state_attr('weather.downstairs', 'temperature')) }}"
    ecobee_outside_humidity:
      friendly_name: "Ecobee Humidity"
      unit_of_measurement: '%'
      value_template: "{{ '%2g'|format(state_attr('weather.downstairs', 'humidity')) }}"
    ecobee_outside_pressure:
      friendly_name: "Ecobee Pressure"
      unit_of_measurement: "mb"
      value_template: "{{ '%4g'|format(state_attr('weather.downstairs', 'pressure')) }}"
    ecobee_downstairs_target_temperature:
      friendly_name: "Downstairs Target"
      unit_of_measurement: '°C'
      value_template: "{{ '%.2f'|format(state_attr('climate.downstairs', 'temperature')) }}"
    ecobee_downstairs_current_temperature:
      friendly_name: "Downstairs Temperature"
      unit_of_measurement: '°C'
      value_template: "{{  '%.2f'|format(state_attr('climate.downstairs', 'current_temperature')) }}"
    ecobee_downstairs_current_humidity:
      friendly_name: "Downstairs Humidity"
      unit_of_measurement: '%'
      value_template: "{{ '%2g' | format(state_attr('climate.downstairs', 'current_humidity')) }}"
    ecobee_downstairs_state:
      friendly_name: "Downstairs State"
      value_template: "{{ state_attr('climate.downstairs', 'hvac_action') }}"
    ecobee_downstairs_equipment_running:
      friendly_name: "Downstairs Equipment Running"
      value_template: "{{ state_attr('climate.downstairs', 'equipment_running') }}"
    ecobee_downstairs_fan:
      friendly_name: "Downstairs Fan"
      value_template: "{{ state_attr('climate.downstairs', 'fan') }} "
    
    ecobee_upstairs_target_temperature:
      friendly_name: "Upstairs Target"
      unit_of_measurement: '°C'
      value_template: "{{ '%.2f'|format(state_attr('climate.upstairs', 'temperature')) }}"
    ecobee_upstairs_current_temperature:
      friendly_name: "Upstairs Temperature"
      unit_of_measurement: '°C'
      value_template: "{{  '%.2f'|format(state_attr('climate.upstairs', 'current_temperature')) }}"
    ecobee_upstairs_current_humidity:
      friendly_name: "Upstairs Humidity"
      unit_of_measurement: '%'
      value_template: "{{ '%2g' | format(state_attr('climate.upstairs', 'current_humidity')) }}"
    ecobee_upstairs_state:
      friendly_name: "Upstairs State"
      value_template: "{{ state_attr('climate.upstairs', 'hvac_action') }}"
    ecobee_upstairs_equipment_running:
      friendly_name: "Upstairs Equipment Running"
      value_template: "{{ state_attr('climate.upstairs', 'equipment_running') }}"
    ecobee_upstairs_fan:
      friendly_name: "Upstairs Fan"
      value_template: "{{ state_attr('climate.upstairs', 'fan') }}"

- platform: template
  sensors:
    ambient_light:
      friendly_name: 'Ambient Light'
      unit_of_measurement: 'N'
      value_template: "{{ '%.2f'|format(  state_attr('sun.sun', 'elevation') * (1 - states('sensor.dark_sky_cloud_coverage') | float/100)  ) }}"

- platform: template
  sensors:
    period_of_day:
      friendly_name: "Period of the day"
      value_template: >-
        {% if state_attr('sun.sun', 'elevation') < -18 %}
          night
        {% elif state_attr('sun.sun', 'elevation') < -12 %}
          astronomical_twilight
        {% elif state_attr('sun.sun', 'elevation') < -6 %}
          nautical_twilight
        {% elif state_attr('sun.sun', 'elevation') < 3 %}
          civil_twilight
        {% else %}
          day
        {% endif %}
      icon_template: >-
        {% if (as_timestamp(state_attr('sun.sun', 'next_dusk')) - (as_timestamp(state_attr('sun.sun', 'next_setting')))) < 0 %}
          mdi:weather-sunset-down
        {% elif (as_timestamp(state_attr('sun.sun', 'next_rising')) - (as_timestamp(state_attr('sun.sun', 'next_dawn')))) < 0 %}
          mdi:weather-sunset-up
        {% elif state_attr('sun.sun', 'elevation') < 0 %}
          mdi:weather-night
        {% else %}
          mdi:weather-sunny
        {% endif %}
# - platform: google_travel_time
#   name: Home to Collins
#   api_key: !secret google_distance_api
#   origin: zone.Home
#   destination: zone.Collins
- platform: waze_travel_time
  origin: zone.Home
  destination: zone.Collins
  region: 'US'
  name: "waze_home_to_collins"
# - platform: command_line
#   name: SSL Cert expiry
#   unit_of_measurement: days
#   scan_interval: 10800
#   command: "ssl-cert-check -b -c /etc/letsencrypt/live/wolverines.duckdns.org/cert.pem | awk '{ print $NF }'"
- platform: worldclock
  time_zone: UTC
  name: UTC
# - platform: template
#   sensors:
#     f1_event_message:
#       friendly_name: "Next F1 Session"
#       value_template: "{{ states.calendar.f1_all.attributes.message }}"
- platform: uptime
  name: HA Uptime
  unit_of_measurement: hours
- platform: version
  name: HA Version
- platform: dnsip # own ip of home
- platform: dnsip
  hostname: wolverines.duckdns.org
  name: DuckDNS Home
  resolver: 8.8.8.8


- platform: template
  sensors: 
    count_automations: 
      value_template: "{{ states.automation | list | length }}"
    count_scripts:
      value_template: "{{ states.script | list | length }}"
    count_device_trackers:
      value_template: "{{ states.device_tracker | list | length }}"
    count_binary_sensors: 
      value_template: "{{states.binary_sensor | list | length}}"
    count_sensors:
      value_template: "{{ states.sensor | list | length}}"
    count_switches:
      value_template: "{{ states.switch | list | length }}"
    count_zones:
      value_template: "{{ states.zone | list | length}}"
    count_input_booleans:
      value_template: "{{ states.input_boolean | list | length}}"
    count_input_numbers:
      value_template: "{{ states.input_number | list | length }}"
    count_input_texts:
      value_template: "{{ states.input_text | list | length }}"
    count_input_selects:
      value_template: "{{ states.input_select | list | length }}"
    count_input_datetimes:
      value_template: "{{ states.input_datetime | list | length }}"

- platform: template
  sensors:
    speedtest_last_run:
      friendly_name: Last speedtest
      value_template: "{{ as_timestamp(states.sensor.speedtest_download.last_changed) | timestamp_custom('%H:%M:%S', True) }}"

- platform: moon
# - platform: opensky
#   radius: 10
- platform: enphase_envoy
  ip_address: !secret envoy_ip
  monitored_conditions:
    - production
- platform:  integration
  source: sensor.envoy_current_energy_production
  name: solar_energy
  unit_time: h # kilowatt hour
  unit: "kWh"
  method: trapezoidal
  unit_prefix: k
  round: 3
- platform: rest
  name: envoy_lifetime_energy
  resource: !secret envoy_rest_url
  value_template: '{{ value_json.wattHoursLifetime / 1000 }}'
  method: GET
  unit_of_measurement: "kWh"
- platform: rest
  name: envoy_daily_energy
  resource: !secret envoy_rest_url
  value_template: '{{ value_json.wattHoursToday / 1000 }}'
  method: GET
  unit_of_measurement: "kWh"
- platform: rest
  name: envoy_weekly_energy
  resource: !secret envoy_rest_url
  value_template: '{{ value_json.wattHoursSevenDays / 1000 }}'
  method: GET
  unit_of_measurement: "kWh"
# - platform: eventsensor
#   name: OpenSkyFlights
#   event: opensky_entry
#   state: callsign
# - platform: template
#   sensors: 
#     mikrotik_router_kb_s_sent:
#       unit_of_measurement: 'kB/s'
#       value_template: "{{ states('sensor.mikrotik_router_kib_s_sent') | float / 8 }} "
#     mikrotik_router_kb_s_received:
#       unit_of_measurement: 'kB/s'
#       value_template: "{{ states('sensor.mikrotik_router_kib_s_received') | float / 8 }}"



     
